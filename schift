package shift;

import java.awt.BorderLayout;

public class Shift extends JFrame {

  private JPanel contentPane;
	private JPanel panel;
	private JButton shr;
	private JButton shl;
	private JButton rol;
	private JButton ror;
	private JCheckBox c0;
	private JCheckBox c1;
	private JCheckBox c2;
	private JCheckBox c3;
	private JCheckBox c4;
	private JCheckBox c5;
	private JCheckBox c6;
	private JCheckBox c7;
	private final ButtonGroup buttonGroup = new ButtonGroup();

	/**
	 * Launch the application.
	 */
	private JCheckBox[] checkboxen ;
	
	private boolean[] bits = new boolean[8];
	public void getBits(){
		for(int i =0;i<checkboxen.length;i++)		{
		
			bits[i]=checkboxen[i].isSelected();
			
			
		}
	}
	public void setBits(){
		for(int i =0;i<bits.length;i++)		{
		
			checkboxen[i].setSelected(bits[i]);
			
			
		}
	}
	

	
	
	
	
	
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Shift frame = new Shift();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
		
			
			
			
			
			
			
			
			
			
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public Shift() {
		initComponents();
	
	
		 JCheckBox[] boxen	=new JCheckBox[] { 
				c0,c1, c2, c3, c4,c5, c6, c7, };
	
	 checkboxen=boxen;
	}
	private void initComponents() {
		setTitle("shift left right v0.0.01");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 234, 301);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		contentPane.setLayout(new BorderLayout(0, 0));
		setContentPane(contentPane);
		
		panel = new JPanel();
		panel.setBorder(new LineBorder(new Color(0, 0, 0)));
		contentPane.add(panel, BorderLayout.SOUTH);
		
		shr = new JButton("SHR");
		shr.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				shrActionPerformed(e);
			}
		});
		
		shl = new JButton("SHL");
		shl.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				shlActionPerformed(e);
			}
		});
		
		rol = new JButton("ROL");
		rol.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				rolActionPerformed(e);
			}
		});
		
		ror = new JButton("ROR");
		ror.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				rorActionPerformed(e);
			}
		});
		
		c0 = new JCheckBox("");
		
		c1 = new JCheckBox("");
		
		c2 = new JCheckBox("");
		
		c3 = new JCheckBox("");
		
		c4 = new JCheckBox("");
		
		c5 = new JCheckBox("");
		
		c6 = new JCheckBox("");
		
		c7 = new JCheckBox("");
		GroupLayout gl_panel = new GroupLayout(panel);
		gl_panel.setHorizontalGroup(
			gl_panel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel.createSequentialGroup()
					.addContainerGap()
					.addGroup(gl_panel.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_panel.createSequentialGroup()
							.addComponent(shr)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(shl))
						.addGroup(gl_panel.createSequentialGroup()
							.addComponent(rol)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(ror))
						.addGroup(gl_panel.createSequentialGroup()
							.addComponent(c0)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(c1, GroupLayout.PREFERRED_SIZE, 21, GroupLayout.PREFERRED_SIZE)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(c2, GroupLayout.PREFERRED_SIZE, 21, GroupLayout.PREFERRED_SIZE)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(c3, GroupLayout.PREFERRED_SIZE, 21, GroupLayout.PREFERRED_SIZE)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(c4, GroupLayout.PREFERRED_SIZE, 21, GroupLayout.PREFERRED_SIZE)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(c5, GroupLayout.PREFERRED_SIZE, 21, GroupLayout.PREFERRED_SIZE)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(c6, GroupLayout.PREFERRED_SIZE, 21, GroupLayout.PREFERRED_SIZE)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(c7, GroupLayout.PREFERRED_SIZE, 21, GroupLayout.PREFERRED_SIZE)))
					.addContainerGap(246, Short.MAX_VALUE))
		);
		gl_panel.setVerticalGroup(
			gl_panel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel.createSequentialGroup()
					.addGap(57)
					.addGroup(gl_panel.createParallelGroup(Alignment.LEADING)
						.addComponent(c7, GroupLayout.PREFERRED_SIZE, 21, GroupLayout.PREFERRED_SIZE)
						.addComponent(c6, GroupLayout.PREFERRED_SIZE, 21, GroupLayout.PREFERRED_SIZE)
						.addGroup(gl_panel.createSequentialGroup()
							.addGroup(gl_panel.createParallelGroup(Alignment.LEADING)
								.addComponent(c0)
								.addComponent(c1, GroupLayout.PREFERRED_SIZE, 21, GroupLayout.PREFERRED_SIZE)
								.addComponent(c2, GroupLayout.PREFERRED_SIZE, 21, GroupLayout.PREFERRED_SIZE)
								.addComponent(c3, GroupLayout.PREFERRED_SIZE, 21, GroupLayout.PREFERRED_SIZE)
								.addComponent(c4, GroupLayout.PREFERRED_SIZE, 21, GroupLayout.PREFERRED_SIZE)
								.addComponent(c5, GroupLayout.PREFERRED_SIZE, 21, GroupLayout.PREFERRED_SIZE))
							.addPreferredGap(ComponentPlacement.RELATED, 111, Short.MAX_VALUE)
							.addGroup(gl_panel.createParallelGroup(Alignment.BASELINE)
								.addComponent(rol)
								.addComponent(ror))
							.addPreferredGap(ComponentPlacement.RELATED)
							.addGroup(gl_panel.createParallelGroup(Alignment.BASELINE)
								.addComponent(shr)
								.addComponent(shl))))
					.addContainerGap())
		);
		panel.setLayout(gl_panel);
	}
	protected void rolActionPerformed(ActionEvent e) {
	
	
	
		getBits();
		for(int i =0;i<bits.length-1;i++)		{
		bits[i]=bits[i+1];
		}
		bits[7]=bits[0];
		setBits();
		
		
	
	
	
	
	
	
	
	
	
	
	
	}
	protected void shlActionPerformed(ActionEvent e) {
	getBits();
	for(int i =0;i<bits.length-1;i++)		{
	bits[i]=bits[i+1];
	}
	bits[7]=false;
	setBits();
	
	
	}
	protected void shrActionPerformed(ActionEvent e) {
	
		getBits();
		for(int i =7;i>0;i--)		{
		bits[i]=bits[i-1];
		}
		bits[0]=false;
		setBits();
		
	
	
	
	
	
	}
	protected void rorActionPerformed(ActionEvent e) {
	
	
		getBits();
		for(int i =7;i>0;i--)		{
		bits[i]=bits[i-1];
		}
		bits[0]=bits[7];
		setBits();
	
	
	
	
	
	
	}
}
